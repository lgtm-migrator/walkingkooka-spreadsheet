(* color ..............................................................................................................*)
COLOR                         = BRACKET_OPEN,
                                ( COLOR_AND_NUMBER | COLOR_NAME ),
                                [ WHITESPACE ],
                                BRACKET_CLOSE;



(* condition ..........................................................................................................*)
CONDITION                     = CONDITION_EQUAL |
                                CONDITION_GREATER_THAN_EQUAL |
                                CONDITION_GREATER_THAN |
                                CONDITION_LESS_THAN_EQUAL |
                                CONDITION_LESS_THAN |
                                CONDITION_NOT_EQUAL;

CONDITION_EQUAL               = BRACKET_OPEN,
                                [ WHITESPACE ],
                                EQUALS,
                                [ WHITESPACE ],
                                CONDITION_NUMBER,
                                [ WHITESPACE ],
                                BRACKET_CLOSE;
                                
CONDITION_GREATER_THAN        = BRACKET_OPEN,
                                [ WHITESPACE ],
                                GREATER_THAN,
                                [ WHITESPACE ],
                                CONDITION_NUMBER,
                                [ WHITESPACE ],
                                BRACKET_CLOSE;

CONDITION_GREATER_THAN_EQUAL  = BRACKET_OPEN,
                                [ WHITESPACE ],
                                GREATER_THAN_EQUALS,
                                [ WHITESPACE ],
                                CONDITION_NUMBER,
                                [ WHITESPACE ],
                                BRACKET_CLOSE;
                                
CONDITION_LESS_THAN           = BRACKET_OPEN,
                                [ WHITESPACE ],
                                LESS_THAN,
                                [ WHITESPACE ],
                                CONDITION_NUMBER,
                                [ WHITESPACE ],
                                BRACKET_CLOSE;

CONDITION_LESS_THAN_EQUAL     = BRACKET_OPEN,
                                [ WHITESPACE ],
                                LESS_THAN_EQUALS,
                                [ WHITESPACE ],
                                CONDITION_NUMBER,
                                [ WHITESPACE ],
                                BRACKET_CLOSE;
                                    
CONDITION_NOT_EQUAL           = BRACKET_OPEN,
                                [ WHITESPACE ],
                                NOT_EQUALS,
                                [ WHITESPACE ],
                                CONDITION_NUMBER,
                                [ WHITESPACE ],
                                BRACKET_CLOSE;



(* date ..............................................................................................................*)
DATE                          = [ CONDITION ],
                                GENERAL_OR_DATE;

GENERAL_OR_DATE               = GENERAL |
                                [{ DAY | MONTH_MINUTE | YEAR | DATETIME_COMPONENT }];



(* date/time .........................................................................................................*)
DATETIME                      = [ CONDITION ],
                                GENERAL_OR_DATETIME;

GENERAL_OR_DATETIME           = GENERAL |
                                [{ DAY | MONTH_MINUTE | YEAR | HOUR | SECOND_MILLIS | AM_SLASH_PM | A_SLASH_P | DATETIME_COMPONENT }];



(* time ..............................................................................................................*)
TIME                          = [ CONDITION ],
                                GENERAL_OR_TIME;

GENERAL_OR_TIME               = GENERAL |
                                [{ HOUR | MONTH_MINUTE | SECOND_MILLIS | AM_SLASH_PM | A_SLASH_P | DATETIME_COMPONENT }];



(* date, datetime, time ..............................................................................................*)
DATETIME_COMPONENT            = COLOR | ESCAPE | DATETIME_TEXT_LITERAL | QUOTED;


(* seconds decimal zeroes.............................................................................................*)
SECOND_MILLIS                 = SECOND,
                                [ DECIMAL_POINT, [{DIGIT_ZERO}]];




(* fractions .........................................................................................................*)
FRACTION                      = FRACTION_COMPONENT,
                                FRACTION_SYMBOL,
                                FRACTION_COMPONENT;

FRACTION_COMPONENT            = [{ FRACTION_OR_LITERAL }],
                                FRACTION_DIGIT,
                                [{ FRACTION_DIGIT | FRACTION_OR_LITERAL }];
FRACTION_OR_LITERAL           = COLOR | CONDITION | CURRENCY | ESCAPE | NUMBER_LITERAL | PERCENTAGE | QUOTED;
FRACTION_DIGIT                = DIGIT | DIGIT_SPACE | DIGIT_ZERO | THOUSANDS;



(* general ...........................................................................................................*)
GENERAL                       = [{ GENERAL_COLOR_WHITESPACE }],
                                GENERAL_SYMBOL,
                                [{ GENERAL_COLOR_WHITESPACE }];

GENERAL_COLOR_WHITESPACE      = WHITESPACE | COLOR;



(* NUMBER .............................................................................................................*)
NUMBER                        = [CONDITION],
                                 GENERAL_OR_NUMBER;

GENERAL_OR_NUMBER             = GENERAL |
                                { COLOR | CURRENCY | DECIMAL_POINT | ESCAPE | NUMBER_EXPONENT | NUMBER_COMPONENT | PERCENTAGE | QUOTED };


NUMBER_EXPONENT               = NUMBER_EXPONENT_SYMBOL,
                                [{ DECIMAL_POINT | NUMBER_DIGIT | NUMBER_COMPONENT }];
NUMBER_EXPONENT_SYMBOL        = ( 'E+' | 'e+' | 'E-' | 'e-' );

NUMBER_DIGIT                  = DIGIT | DIGIT_SPACE | DIGIT_ZERO | THOUSANDS;

NUMBER_COMPONENT              = { COLOR | CURRENCY | DECIMAL_POINT | ESCAPE | NUMBER_DIGIT | NUMBER_LITERAL | QUOTED };




(* text format, note the last pattern may not have a condition........................................................*)
TEXT_FORMAT                   = [{ [ CONDITION ], TEXT, PATTERN_SEPARATOR }],
                                TEXT;



(* text without color/condition used in parse patterns, some magic placeholder tokens are not valid like STAR.........*)
TEXT_PARSE                    = TEXT_CHARACTER | ESCAPE | QUOTED | UNDERSCORE;



(* text WITH color but NO condition used by the last format patterns..................................................*)
TEXT                           = TEXT_COLOR_WITH_STAR | TEXT_COLOR_WITHOUT_STAR;



(* text common........................................................................................................*)
TEXT_COLOR_WITH_STAR           = [{ TEXT_COLOR_COMPONENT }],
                                 STAR,
                                 [{ TEXT_COLOR_COMPONENT }];

TEXT_COLOR_WITHOUT_STAR        = [{ TEXT_COLOR_COMPONENT }];

TEXT_COLOR_COMPONENT           = COLOR | TEXT_CHARACTER | ESCAPE | QUOTED | TEXT_PLACEHOLDER | UNDERSCORE;

TEXT_CHARACTER                 = { ' ' | '<' | '>' | '=' | '!' | '$' | '-' | '+' | '(' | ')' | '%' | '#' | '&' | '/' | ',' | ':' };
