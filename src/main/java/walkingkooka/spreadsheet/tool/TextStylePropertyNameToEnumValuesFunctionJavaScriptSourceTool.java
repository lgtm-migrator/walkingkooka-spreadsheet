/*
 * Copyright 2019 Miroslav Pokorny (github.com/mP1)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package walkingkooka.spreadsheet.tool;

import walkingkooka.text.Indentation;
import walkingkooka.text.printer.IndentingPrinter;
import walkingkooka.text.printer.Printers;
import walkingkooka.tree.text.TextStylePropertyName;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Optional;

/**
 * When run prints out a javascript function that accepts a style property and returns the matching enum class.
 */
public final class TextStylePropertyNameToEnumValuesFunctionJavaScriptSourceTool {

    public static void main(final String[] args) {
        try (final IndentingPrinter printer = Printers.sysOut().indenting(Indentation.with("  "))) {

            printer.println("// generated by " + TextStylePropertyNameToEnumValuesFunctionJavaScriptSourceTool.class.getSimpleName() + " at " + DateTimeFormatter.ISO_LOCAL_DATE_TIME.format(LocalDateTime.now()));
            printer.println("function stylePropertyNameToEnum(property) {");
            printer.indent();
            {
                printer.println("let values;");
                printer.println();

                printer.println("switch(property) {");
                printer.indent();
                {
                    for (final TextStylePropertyName name : TextStylePropertyName.values()) {
                        final Optional<Class<Enum<?>>> possibleEnumType = name.enumType();
                        if (possibleEnumType.isPresent()) {
                            final String kebabName = name.value();

                            printer.println("case TextStyle." + toUpperCaseUnderscore(kebabName) + ":");
                            printer.indent();
                            {
                                printer.println("values = " + possibleEnumType.get().getSimpleName() + ".values();");
                                printer.println("break;");
                            }
                            printer.outdent();
                        }
                    }

                    printer.println("default:");
                    printer.indent();
                    {
                        printer.println("throw new Error(\"Invalid style property \\\" + property + \\\"\");");
                    }
                    printer.outdent();
                }
                printer.outdent();
                printer.println("}");
                printer.println("return values;");
            }
            printer.outdent();
            printer.println("}");
            printer.flush();
        }
    }

    private static String toUpperCaseUnderscore(final String kebabName) {
        return kebabName.toUpperCase()
                .replace('-', '_');
    }
}
